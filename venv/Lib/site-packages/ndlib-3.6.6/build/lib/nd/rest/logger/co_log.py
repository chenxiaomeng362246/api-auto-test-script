# coding=utf-8

import sys
from nd.rest.conf.conf import MyCfg

import logging
from nd.rest.logger.config import LogConfig
from nd.rest.logger.log import LogInfo
from nd.rest.logger.scribe_status import check_server_status

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s[%(lineno)d] %(levelname)s %(message)s')
logger_o = logging.getLogger(__name__)


import nd.rest.conf as CoConfM


class CoLogger(object):
    """
    日志记录类

    使用config/{env}/cfg.ini进行配置

    .. code-block:: shell

        [log]
        type = file
        type = scribe
        type = socket


    .. code-block:: python

        >>> logger = Logger()
        >>> logger.info("打印日志")

    """
    def __init__(self, log_tag=MyCfg.LOG_TAG, log_file="error.log", fp=""):
        self.cfg_path = None
        self.fp = fp

        try:
            cfg_o = CoConfM.MyCfg('cfg.ini')
            self.cfg_path = cfg_o.path
            cfg_o.set_section('log')
            log_type = cfg_o.get('type')
            logger_o.info(log_type)
        except Exception, e:
            logger_o.error(e)
            if check_server_status(LogConfig.HOST, LogConfig.PORT):
                log_type = 'scribe'
                logger_o.info(log_type)
                logger_o.error("您需要在以下配置文件设置log配置段，日志服务器连接正常，默认使用scribe进行记录")
                logger_o.error(self.cfg_path)
            else:
                log_type = "file"

        if log_tag is None:
            log_tag = __name__

        logger = logging.getLogger(log_tag)
        logger.propagate = False

        if not hasattr(self, 'scribe_handler'):
            logger_o.info("设置log handler")
            log_info = LogInfo()

            # 还没有设置日志句柄
            if log_type == 'file':
                self.scribe_handler = logging.FileHandler(filename=log_file)
                logger.addHandler(self.scribe_handler)
            elif log_type == 'scribe':
                try:
                    from nd.rest.logger.scribe_handler import ScribeHandler

                    self.scribe_handler = ScribeHandler(log_tag)

                    self.scribe_handler.setFormatter(log_info.get_format())

                    if len(logger.handlers) == 0:
                        logger.addHandler(self.scribe_handler)
                except Exception, e:
                    logger_o.info(e)
            else:
                from nd.rest.logger.hyqa_logger import ScribeHandler

                # 初始化一个日志处理器
                # 连接到日志服务器
                self.scribe_handler = ScribeHandler()

                self.scribe_handler.setLevel(CoConfM.MyCfg.LOGLEVEL)

                self.scribe_handler.set_appid(9997)

                self.scribe_handler.set_filepath('/LogTest/Test01/error.log')

                logger.addHandler(self.scribe_handler)

        self.logger = logger

    def info(self, msg):
        self.logger.info(self.fp + str(msg))

    def debug(self, msg):
        self.logger.debug(msg)

    def debug_path(self, path):
        self.scribe_handler.set_filepath(path)
        self.logger.info("debug: 伪接口")

    def get_logger(self):
        return self.logger


if __name__ == "__main__":
    print __file__
    log = CoLogger("测试01\/" + __name__)
    log.info("hello, world")
    # log.debug("/LogTest/Test02/error.log")
    # log.debug("/LogTest/Test03/error.log")
