# coding=utf-8
import base64
from binascii import b2a_hex

import hashlib
# from Crypto.Cipher import DES
from pyDes import des, ECB, PAD_PKCS5
# from pkcs7 import PKCS7Encoder

__author__ = 'linzh'


def md5(passwd):
    hex_str = "a3aca1a3"  # UC 固定的插值 16进制字符byte：163 172 161 163
    salt = 'fdjf,jkgfkl'  # UC 固定的的salt值
    bt = []

    for i in range(0, len(hex_str), 2):
        b = hex_str[i:i + 2]
        bt.append(chr(int(b, 16)))

    btmd5 = ''.join(bt)

    md5_input = str(passwd) + btmd5 + salt

    # 创建md5对象
    hl = hashlib.md5()
    hl.update(md5_input)
    passwd_md5 = hl.hexdigest()

    return passwd_md5

def add_to_16(text):
    if len(text.encode('utf-8')) % 16:
        add = 16 - (len(text.encode('utf-8')) % 16)
    else:
        print "no 16"
        add = 0
        text = text + ('\0' * add)
    print "pwd: " + str(len(text))
    return text.encode('utf-8')


def aes_enc(pwd, key):

    #mode = DES.MODE_ECB
    #encoder = PKCS7Encoder()
    #BS = DES.block_size
    #pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
    # print encoder.encode(pwd)
    cipher = des(key, ECB, pad=None, padmode=PAD_PKCS5)

    return base64.b64encode(cipher.encrypt(pwd))


def des_decrypt(string, des_key):
    """
    UC1.0 DES对称解密算法
    :param string:明文
    :param des_key:秘钥
    :return 密文
    """
    string = base64.b64decode(str(string))
    k = des(key=str(des_key), mode=ECB, padmode=PAD_PKCS5)
    EncryptStr = k.decrypt(string)

    return EncryptStr


if __name__ == "__main__":
    print md5("123456\"")
    print aes_enc("123456", "12345678")
