# coding=utf-8
import base64
import hashlib
import hmac
import json
from nd.rest.http import Http

from nd.rest.nd_uc import UcEnv
from nd.rest.uc.bts.config import BtsConfig
from nd.rest.uc.interface.tok import IToken
from nd.rest.uc.util.nonce import nonce
from nd.rest.restful import *

__author__ = 'linzh'

Http.DEBUG = True


class BtsToken(IToken):
    def __init__(self, env):
        config_o = BtsConfig()
        self.env = env
        self.host = config_o.get_host(self.env)
        if 'https://' in self.host:
            self.ssl = True
        else:
            self.ssl = False
        self.token = None
        self.rest_o = Restful()

    def get_token(self, app_name, app_secret, method, uri, host, header):

        if self.token is None:
            url = "/v0.1/bts_tokens"

            data = {
                "app_name": app_name,
                "app_secret": app_secret
            }

            data_str = json.dumps(data)

            http = Http(self.host.split('//')[1], ssl=self.ssl)

            http.set_header({
                "Content-Type": "application/json"
            })

            res = http.post(url, data_str)
            data_dict = self.rest_o.parse_response(res, 201, '获取bts_tokens失败')

            self.token = data_dict

        authorization = self.get_mac(method, uri, host, header)

        return authorization

    def get_mac(self, method, uri, host, header):
        # signParams = [method, uri, host]
        sign_params = []

        sign_params.append(method)
        sign_params.append(uri)
        sign_params.append(host)

        # �����sdp-��ͷ��header����ҲҪ����
        for key in sorted(header.keys()):
            if "sdp-" in key.lower():
                sign_params.append(str(header[key]))

        sign_params.append("")

        print "sign string: ", '\n'.join(sign_params)
        mac = base64.b64encode(hmac.new(self.token["mac_key"].encode("utf-8"), '\n'.join(sign_params),
                                        digestmod=hashlib.sha256).digest())

        # print 'MAC id="' + token["access_token"].encode("utf-8") + '",nonce="' + nonce1 + '",mac="' + mac + '"'
        authorization = 'BTS id="' + self.token['access_token'] + '",mac="' + mac + '"'
        return authorization


if __name__ == "__main__":
    token_o = BtsToken(UcEnv.pre)
    header = dict()
    app_name = ""
    app_secret = ""
    url = "/v0.6/institutions"
    host = "organization.beta.101.com"
    print token_o.get_token(app_name, app_secret, "POST", url, host, header)
