# coding=utf-8
from nd.rest.uc.config.uc_config import UcConfig
from nd.rest.uc.mac.v1_1.tok import MacV11Token

from nd.rest.co_http.config import HttpType
from nd.rest.co_token.uc import UcToken
from nd.rest.nd_uc import UcEnv
from nd.rest.uc.bts.tok import BtsToken
from nd.rest.uc.config.token_t import TokenType


__author__ = 'linzh'


class AuthHttp(object):
    def __init__(self, host="", ssl=False, http_type=HttpType.HTTPLIB, debug=False, token_type=TokenType.MAC110, appid="", auth_config=None):
        self.http = None

        self.appid = appid
        self.host = host

        self.auth_config = auth_config

        if auth_config is None:
            self.auth_config = UcConfig()
            self.token_type = token_type
            self.env = self.auth_config.env = UcEnv.pre
            self.username = self.auth_config.username = "10005074"
            self.password = self.auth_config.password = "qa123456"
            self.org = self.auth_config.org = "nd"
        else:
            self.token_type = auth_config.ty
            self.env = auth_config.env
            self.username = auth_config.username
            self.password = auth_config.password
            self.org = auth_config.org
            self.appid = auth_config.appid

        if self.token_type is None:
            raise Exception("AuthHttp: UC配置缺失(缺少token_type)")

        if self.env is None:
            raise Exception("UC配置缺失（缺少env环境）")

        if http_type == HttpType.CURL:
            from nd.rest.co_http.co_curl import Http
            if debug:
                Http.DEBUG = True

            self.http = Http(host, ssl=ssl)
        else:
            from nd.rest.http import Http
            self.http = Http(host, ssl=ssl)

        self.header = {
            "Content-Type": "application/json"
        }

        if self.appid != "":
            self.header["sdp-app-id"] = self.appid

        self.http.set_header(self.header)

    def get_mac_token(self, url, method):
        tok_o = UcToken(self.env)
        tok = tok_o.get_token("10005074@nd", "qa123456", url=url, method=method, host=self.host)

        header = self.header

        header["Authorization"] = tok
        # header["sdp-app-id"] = self.appid

        self.http.set_header(header)

    def get_mac_v11_token(self, url, method):
        tok_o = MacV11Token(self.auth_config)
        tok_o.get_session()
        tok_o.token()
        tok = tok_o.get_mac(method, url, self.host)
        header = self.header
        header["Authorization"] = tok
        header["token-type"] = "mac v11"
        header["user"] = self.username
        self.http.set_header(header)

    def get(self, *args):
        method = "GET"
        url = args[0]

        if self.token_type == TokenType.MAC110:
            self.get_mac_v11_token(url, method)
        elif self.token_type == TokenType.MAC093:
            self.get_mac_token(url, method)

        return self.http.get(*args)

    def post(self, *args):
        method = "POST"
        url = args[0]

        if self.token_type == TokenType.MAC110:
            self.get_mac_v11_token(url, method)
        elif self.token_type == TokenType.MAC093:
            self.get_mac_token(url, method)

        return self.http.post(*args)

    def patch(self, *args):
        method = "PATCH"
        url = args[0]

        if self.token_type == TokenType.BTS:
            # app应用名称
            app_name = ""
            # app BTS密钥
            app_secret = ""
            appid = self.appid

            token_o = BtsToken()
            token_o.get_token(app_name, app_secret)

            tok = token_o.get_mac(method, args[0], self.host, appid)

            header = self.header
            header["Authorization"] = tok
            header["sdp-app-id"] = self.appid
            self.http.set_header(header)
        elif self.token_type == TokenType.MAC110:
            self.get_mac_v11_token(url, method)
        elif self.token_type == TokenType.MAC093:
            self.get_mac_token(url, method)

        return self.http.patch(*args)

    def delete(self, *args):
        method = "DELETE"
        url = args[0]

        if self.token_type == TokenType.MAC110:
            self.get_mac_v11_token(url, method)
        elif self.token_type == TokenType.MAC093:
            self.get_mac_token(url, method)

        return self.http.delete(*args)
